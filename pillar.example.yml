#
# clustered-dumbo
#
# Copyright (C) 2025   darix
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

includes:
  # required overrides so that the backups are only running on the primary node
  - includes.patroni-pgbackrest-overrides
  # optionally we can deploy all certs via step-ca
  - includes.patroni-step-ca
  ## those salt mine functions are used throughout the formula.
  #  e.g if you want to have your cluster only listen on certain internal IPs you need to provide a salt mine function for that.
  #  suse-profile-base has some example function that can be used in https://github.com/darix/suse-base-profile/blob/stable/salt/_modules/filter_interfaces.py
  #  to filter ips from certain interfaces
  - includes.patroni-mine-config

{%- set patroni_cluster_role            = 'I@role:patroni' %}
{%- set minio_cluster_role              = 'I@role:minio'   %}
{%- set etcd_cluster_role               = 'I@role:etcd'    %}

{%- set cluster_address_mine_function           = 'cluster_internal_ips' %}
{%- set cluster_host_mine_function              = 'fqdn' %}

# patroni
{%- set patroni_scope     = "cluster1" %}
{%- set patroni_namespace = "patroni" %}

# pgbackrest
{%- set pgbackrest_stanza = patroni_scope ~ '-' ~ patroni_namespace %}

{%- set location       = "eu-west-1" %}
{%- set bucket_name    = "pgbackrest-patroni-pg" %}
{%- set minio_user     = "pgbackrest_patroni_pg" %}
{%- set password_key   = "patroni-minio/" ~ minio_user ~ "/password"   %}
{%- set access_key     = "patroni-minio/" ~ minio_user ~ "/access_key" %}
{%- set secret_key     = "patroni-minio/" ~ minio_user ~ "/secret_key" %}
{%- set encryption_key = "patroni-minio/" ~ minio_user ~ "/encryption_key" %}

##
## As this formula wants to use client certificates for everything as an additional layer of security,
## a lot of places assume that the step-ca formula is used.
##
## https://github.com/darix/step-ca-formula
##
## This also is reflected in some paths and pillar entries referenced by default
## if you don't use the step-ca formula to deploy any of the certs, please provide
## at least a pillar block like below. Do NOT use /etc/ssl/ca-bundle.pem
##
## If you use /etc/ssl/ca-bundle.pem, (client) certificates signed by _any_ CA
## can authenticate.
##
# step:
#  client_config:
#    ca:
#       root_cert:
#          path: /usr/share/pki/trust/anchors/your-ca-root.pem

## those salt mine functions are used throughout the formula.
#  e.g if you want to have your cluster only listen on certain internal IPs you need to provide a salt mine function for that.
#  suse-profile-base has some example function that can be used in https://github.com/darix/suse-base-profile/blob/stable/salt/_modules/filter_interfaces.py
#  to filter ips from certain interfaces
mine_functions:
  cluster_internal_ips:
    mine_function: network.ip_addrs
    interface: cluster_internal
    cidr: 192.168.42.0/24

etcd:
  bootstrap: false
  etcd_cluster_name:          {{ pgbackrest_stanza }}
  etcd_cluster_role:          {{ etcd_cluster_role }}
  etcd_address_mine_function: {{ cluster_address_mine_function }}
  etcd_host_mine_function:    {{ cluster_host_mine_function }}

patroni:
  # start a new node - unless initialize_cluster is also true it requires existing hosts/a backup to pull from
  bootstrap: false
  # if you want to set up a new cluster fully from scratch
  initialize_cluster: false
  patroni_cluster_role:          {{ patroni_cluster_role }}
  patroni_cluster_address_mine_function: {{ cluster_address_mine_function }}
  config:
    scope: {{ pgbackrest_stanza }}
    namespace: {{ patroni_namespace }}
    restapi:
      username: patroni-admin
      password: {{ "patroni-admin" | gopass }}

pgbackrest:
  timers_enabled:
    # default is:
    - all
    # if you do not want all you can also specify each timer separately
    # - diff
    # - full
    # - incr
  minio_cluster_role: {{ minio_cluster_role }}
  minio_cluster_address_mine_function: {{ cluster_address_mine_function }}
  stanza: {{ pgbackrest_stanza }}
  config:
    global:
      # encrypt the backup
      repo1-s3-region:      {{ location }}
      repo1-s3-bucket:      {{ bucket_name }}
      repo-cipher-pass:     {{ encryption_key | gopass }}
      # auth data
      repo1-s3-key:         {{ access_key | gopass }}
      repo1-s3-key-secret:  {{ secret_key | gopass }}
    stanzas:
      {{ pgbackrest_stanza }}:
        enable: True
        use_standby_for_backup: False

postgresql:
  authentication:
    replication:
      password: {{ "patroni/replication" | gopass }}
    superuser:
      password: {{ "patroni/superuser" | gopass }}
    rewind:
      password: {{ "patroni/rewind" | gopass }}
  server_items:
    user:
      minio:
        password: blubber
        login: true
    database:
      minio:
        owner: minio

##
## this requires the profile-base.systemd-overrides from the suse-profile-base formula
##
#
# The following services are supported by the pgbackrest package
#
# pgbackrest-diff@.timer
# pgbackrest-full@.timer
# pgbackrest-incr@.timer
#
# First we check what current scheduling the current timer unit uses
# and then we reset the current timer setting and then define our new settings
#
# For all scheduling settings see man systemd.timer
#
# systemd:
#   overrides:
#     pgbackrest-diff@{{ pgbackrest_stanza }}.service:
#       Timer:
#         # this resets the hardcoded timer setting
#         - OnCalendar=
#         - OnCalendar=Tue *-*-* 05:05:05
#